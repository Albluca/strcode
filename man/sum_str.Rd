% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sum_str.R
\name{sum_str}
\alias{sum_str}
\title{Summarize the code structure}
\usage{
sum_str(path_in = etSourceEditorContext()$path, file_in_extension = ".R",
  dir_out = "", file_out = NULL, file_out_extension = "", width = NULL,
  rm_rh_hashes = TRUE, rm_rh_spaces = TRUE, line_nr = TRUE,
  granularity = 3, last_sep = FALSE, title = TRUE, header = TRUE, ...)
}
\arguments{
\item{path_in}{Either a path to a directory or to a single file. If it is
a directory path, all files in that directory will be summarised. If it
is a single file path, only the resepective file will be summarised.
The default value uses the RStudio API to produce a summary of content from
the source editor. This requires that the file is saved before
\code{sum_str} is called.}

\item{file_in_extension}{If \code{file_in} is \code{NULL}, all files with the
\code{file_in_extension} are considered, defaults to ".R".}

\item{dir_out}{The directory to print the output to. "" implies the console.}

\item{file_out}{A connection or character string naming the file to print to.
If set to \code{NULL}, the name will be \code{paste0("code-summary_", file_in)}.
If \code{dir_out} is set to "", \code{file_out} can be set to
"object" and the output of the function will be returned as an
object instead of just printed to the console with \code{cat}. This is
useful if output should be assigned to an object. If not set to "object",
\code{cat} will be used.}

\item{file_out_extension}{A file extension for the file to be created.}

\item{width}{The character width of the output. If NULL, it is set to the
length of the longest separator title.}

\item{rm_rh_hashes}{Boolean value indicating whether or not to remove
righthand hashes in section titles (see details).}

\item{rm_rh_spaces}{Boolean value indicating whether or not to remove
righthand spaces in section titles (see details).}

\item{line_nr}{A boolean value that indicates whether the line numbers should
be printed along with the structure summary.}

\item{granularity}{Indicates the lowest level of granularity that should be
included in the summary.}

\item{last_sep}{A boolean value indicating whether or not the separating
lines of the highest granularity should be printed.}

\item{title}{A boolean value indicating whether the reported summary should
contain a title or not.}

\item{header}{A boolean value indicating whether a column header should
indicate the name of the columns (line, level, section).}

\item{...}{futher arguments to be passed from and to other methods, in
particular \code{\link{list.files}} for reading in multiple files.}
}
\description{
Create a summary of one or multiple code files based on the section
separators and their titles.
}
\details{
To create the summary, \code{sum_str} uses regular expressions.
  Hence it is crucial that the code separators and the separator titles
  match the regular expression pattern. We recommend inserting
  separators and their titles using the RStudio Add-in that is contained
  in this package. The definition is rather intuitive as can be seen in the
  example section below. However, we shall provide a formal definition here
  as well.
  \itemize{
    \item A code separator is defined as a line that starts with n hashes,
    followed by 4-n spaces where 0 < n < 4. This sequence is followed by one
    or more either \code{.} or \code{_}.
    \item A title associated with a code separator is defined as a line
    that starts with n hashes, followed by 4-n spaces where 0 < n < 4. This
    sequence is \emph{not} followed by \code{.} or \code{_}.
  }
  Lines that do not satisfy these requirements (e.g. do not start with #s,
  do not contain the right number of spaces after the #, indent before any #
  ect.) are not considered by \code{sum_str}.
}
\section{Removing spaces and hashes}{

  The add-in contained in this package inserts section titles in a way that
    that they are recognised by RStudio as sections (for details, see
    \href{https://support.rstudio.com/hc/en-us/articles/200484568-Code-Folding-and-Sections}{RStudio's official website}. One structure that is
    recognised by RStudio as section is a line starting with a hash and ending
    with four hashes. This structure is implemented with \code{strcode}.
    Hence when creating the summary, it might be desired to remove the right
    hand hashes and spaces, which can be specified with the respective options
    \code{rm_rh_hashes} and \code{rm_rh_spaces}.
}

\examples{
# the following separator is an example of a valid
# separator and associated title

#   __________________________________________________
#   this is a level 1 title                     ####
##  . . . . . . . . . . . . . . . . . . . . . . . . .
##  note that the title or the separator character (_, .)
##  always starts at indention 4.

\dontrun{
# Open a new .R file in RStudio, insert some code breaks
# using the Add-in of this package, save the file and run:
sum_str() # get a summary of the source editor.
}
}
\seealso{
insert_l_break
}
