% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sum_str.R
\name{sum_str}
\alias{sum_str}
\title{Summarize the code structure}
\usage{
sum_str(dir_in = NULL, dir_out = "",
  file_in = getSourceEditorContext()$path, file_in_extension = ".R",
  file_out = NULL, file_out_extension = "", width = NULL,
  line_nr = TRUE, granularity = 3, lowest_sep = TRUE, title = TRUE,
  header = TRUE, ...)
}
\arguments{
\item{dir_in}{A directory where the file(s) can be found.}

\item{dir_out}{A directory where to print the output to. "" implies the
console.}

\item{file_in}{The name of a file which should be summarized. \code{NULL} will
create a summary of all files in the directory. The default value uses the
RStudio api and produces a summary of the source editor.}

\item{file_in_extension}{If \code{file_in} is \code{NULL}, all files with the
\code{file_in_extension} are considered.}

\item{file_out}{A connection or character string naming the file to print to.
The argument is irrelevant if \code{output_dir} is set to "".}

\item{file_out_extension}{An file extension for the file to be created.}

\item{width}{The character width of the output. If NULL, it is set to the
the length of the longest separator comment.}

\item{line_nr}{A boolean value that indicates whether the line numbers should
be printed along with the structure summary.}

\item{granularity}{Indicating how many levels should be in the summary}

\item{lowest_sep}{A boolean value indicating whether the separating lines
should be reported along their comments or not.}

\item{title}{A boolean value indicating whether the reported summary should
contain a title or not.}

\item{header}{A boolean values indicating whether a column header should
indicate the name of the columns (line, level, section).}

\item{...}{futher arguments to be passed from and to other methods, in
particular \code{\link{list.files}} for reading in multiple files.}
}
\description{
Create a summary of one or multiple code files by collapsing them into the
section separators and their comments.
}
\details{
To create the summary, \code{sum_str} uses regular expressions.
  Hence it is crucial that the code separators and the separator comments
  match the regular expression pattern. We recommend inserting
  separators and their comments using the RStudio Add-in that is contained
  in this package. The definition is rather intuitive as can be seen in the
  example section below. However, we shall provide a formal definition here
  as well.
  \itemize{
    \item A code separator is defined as a line that that starts with n
    hashes, followed by 4-n spaces where 0 < n < 4. This
    sequence is followed by one or more either \code{.} or \code{_}.
    \item A comment associated with a code separator is defined as a line
    that that starts with n hashes, followed by 4-n spaces where 0 < n < 4.
    This sequence is \emph{not} followed by \code{.} or
    \code{_}.
    }
 Lines that do not satisfy these requirements (e.g. do not start with #s,
 do not contain the right number of spaces after the #, indent before any #
 ect.) are not considered by \code{sum_str}.
}
\examples{
# the following separators are examples for valid
# separators and associated comments

#   __________________________________________________
#   this is a level 1 comment
##  . . . . . . . . . . . . . . . . . . . . . . . . .
##  note that the comment or the separator character (_, .)
##  always starts at indention 4.

\dontrun{
# open a new .R file in Rstudio, insert some code breaks
# using the Add-in of this package, safe the file and run:
sum_str() # get a summary of the source editor.
}
}

